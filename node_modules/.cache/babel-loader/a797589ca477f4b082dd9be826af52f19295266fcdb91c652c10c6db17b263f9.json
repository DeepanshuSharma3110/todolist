{"ast":null,"code":"// redux/reducer/fetchReducer.js\nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n\n// Fetch data thunk\nconst fetchData = createAsyncThunk('fetchData', async () => {\n  const response = await fetch('https://jsonplaceholder.typicode.com/todos');\n  return response.json();\n});\n\n// Post data thunk\nconst postData = createAsyncThunk('postData', async ({\n  userId,\n  id,\n  completed\n}) => {\n  const response = await fetch('https://jsonplaceholder.typicode.com/posts', {\n    method: 'POST',\n    body: JSON.stringify({\n      title,\n      body,\n      userId\n    }),\n    headers: {\n      'Content-Type': 'application/json; charset=UTF-8'\n    }\n  });\n  return response.json();\n});\n\n// Slice for managing fetch and post data\nconst fetchReducer = createSlice({\n  name: 'fetchReducer',\n  initialState: {\n    data: [],\n    loading: false,\n    error: null\n  },\n  reducers: {},\n  extraReducers: builder => {\n    // Fetch cases\n    builder.addCase(fetchData.fulfilled, (state, action) => {\n      state.data = action.payload;\n      state.loading = false;\n    });\n    builder.addCase(fetchData.pending, state => {\n      state.loading = true;\n      state.error = null;\n    });\n    builder.addCase(fetchData.rejected, (state, action) => {\n      state.error = action.error.message;\n      state.loading = false;\n    });\n\n    // Post cases\n    builder.addCase(postData.fulfilled, (state, action) => {\n      state.data.push(action.payload);\n      state.loading = false;\n    });\n    builder.addCase(postData.pending, state => {\n      state.loading = true;\n      state.error = null;\n    });\n    builder.addCase(postData.rejected, (state, action) => {\n      state.error = action.error.message;\n      state.loading = false;\n    });\n  }\n});\nexport default fetchReducer.reducer;\nexport { fetchData, postData };","map":{"version":3,"names":["createSlice","createAsyncThunk","fetchData","response","fetch","json","postData","userId","id","completed","method","body","JSON","stringify","title","headers","fetchReducer","name","initialState","data","loading","error","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","pending","rejected","message","push","reducer"],"sources":["D:/coding ninja projects/skillTest/todolist/src/redux/reducer/fetchReducer.js"],"sourcesContent":["// redux/reducer/fetchReducer.js\r\nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\n// Fetch data thunk\r\nconst fetchData = createAsyncThunk('fetchData', async () => {\r\n  const response = await fetch('https://jsonplaceholder.typicode.com/todos');\r\n  return response.json();\r\n});\r\n\r\n// Post data thunk\r\nconst postData = createAsyncThunk('postData', async ({  userId , id,  completed }) => {\r\n  const response = await fetch('https://jsonplaceholder.typicode.com/posts', {\r\n    method: 'POST',\r\n    body: JSON.stringify({\r\n      title,\r\n      body,\r\n      userId,\r\n    }),\r\n    headers: {\r\n      'Content-Type': 'application/json; charset=UTF-8',\r\n    },\r\n  });\r\n  return response.json();\r\n});\r\n\r\n// Slice for managing fetch and post data\r\nconst fetchReducer = createSlice({\r\n  name: 'fetchReducer',\r\n  initialState: {\r\n    data: [],\r\n    loading: false,\r\n    error: null,\r\n  },\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    // Fetch cases\r\n    builder.addCase(fetchData.fulfilled, (state, action) => {\r\n      state.data = action.payload;\r\n      state.loading = false;\r\n    });\r\n    builder.addCase(fetchData.pending, (state) => {\r\n      state.loading = true;\r\n      state.error = null;\r\n    });\r\n    builder.addCase(fetchData.rejected, (state, action) => {\r\n      state.error = action.error.message;\r\n      state.loading = false;\r\n    });\r\n\r\n    // Post cases\r\n    builder.addCase(postData.fulfilled, (state, action) => {\r\n      state.data.push(action.payload);\r\n      state.loading = false;\r\n    });\r\n    builder.addCase(postData.pending, (state) => {\r\n      state.loading = true;\r\n      state.error = null;\r\n    });\r\n    builder.addCase(postData.rejected, (state, action) => {\r\n      state.error = action.error.message;\r\n      state.loading = false;\r\n    });\r\n  }\r\n});\r\n\r\nexport default fetchReducer.reducer;\r\nexport { fetchData, postData };\r\n"],"mappings":"AAAA;AACA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;;AAEhE;AACA,MAAMC,SAAS,GAAGD,gBAAgB,CAAC,WAAW,EAAE,YAAY;EAC1D,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,4CAA4C,CAAC;EAC1E,OAAOD,QAAQ,CAACE,IAAI,CAAC,CAAC;AACxB,CAAC,CAAC;;AAEF;AACA,MAAMC,QAAQ,GAAGL,gBAAgB,CAAC,UAAU,EAAE,OAAO;EAAGM,MAAM;EAAGC,EAAE;EAAGC;AAAU,CAAC,KAAK;EACpF,MAAMN,QAAQ,GAAG,MAAMC,KAAK,CAAC,4CAA4C,EAAE;IACzEM,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACnBC,KAAK;MACLH,IAAI;MACJJ;IACF,CAAC,CAAC;IACFQ,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC,CAAC;EACF,OAAOZ,QAAQ,CAACE,IAAI,CAAC,CAAC;AACxB,CAAC,CAAC;;AAEF;AACA,MAAMW,YAAY,GAAGhB,WAAW,CAAC;EAC/BiB,IAAI,EAAE,cAAc;EACpBC,YAAY,EAAE;IACZC,IAAI,EAAE,EAAE;IACRC,OAAO,EAAE,KAAK;IACdC,KAAK,EAAE;EACT,CAAC;EACDC,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAC1B;IACAA,OAAO,CAACC,OAAO,CAACvB,SAAS,CAACwB,SAAS,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MACtDD,KAAK,CAACR,IAAI,GAAGS,MAAM,CAACC,OAAO;MAC3BF,KAAK,CAACP,OAAO,GAAG,KAAK;IACvB,CAAC,CAAC;IACFI,OAAO,CAACC,OAAO,CAACvB,SAAS,CAAC4B,OAAO,EAAGH,KAAK,IAAK;MAC5CA,KAAK,CAACP,OAAO,GAAG,IAAI;MACpBO,KAAK,CAACN,KAAK,GAAG,IAAI;IACpB,CAAC,CAAC;IACFG,OAAO,CAACC,OAAO,CAACvB,SAAS,CAAC6B,QAAQ,EAAE,CAACJ,KAAK,EAAEC,MAAM,KAAK;MACrDD,KAAK,CAACN,KAAK,GAAGO,MAAM,CAACP,KAAK,CAACW,OAAO;MAClCL,KAAK,CAACP,OAAO,GAAG,KAAK;IACvB,CAAC,CAAC;;IAEF;IACAI,OAAO,CAACC,OAAO,CAACnB,QAAQ,CAACoB,SAAS,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MACrDD,KAAK,CAACR,IAAI,CAACc,IAAI,CAACL,MAAM,CAACC,OAAO,CAAC;MAC/BF,KAAK,CAACP,OAAO,GAAG,KAAK;IACvB,CAAC,CAAC;IACFI,OAAO,CAACC,OAAO,CAACnB,QAAQ,CAACwB,OAAO,EAAGH,KAAK,IAAK;MAC3CA,KAAK,CAACP,OAAO,GAAG,IAAI;MACpBO,KAAK,CAACN,KAAK,GAAG,IAAI;IACpB,CAAC,CAAC;IACFG,OAAO,CAACC,OAAO,CAACnB,QAAQ,CAACyB,QAAQ,EAAE,CAACJ,KAAK,EAAEC,MAAM,KAAK;MACpDD,KAAK,CAACN,KAAK,GAAGO,MAAM,CAACP,KAAK,CAACW,OAAO;MAClCL,KAAK,CAACP,OAAO,GAAG,KAAK;IACvB,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;AAEF,eAAeJ,YAAY,CAACkB,OAAO;AACnC,SAAShC,SAAS,EAAEI,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}