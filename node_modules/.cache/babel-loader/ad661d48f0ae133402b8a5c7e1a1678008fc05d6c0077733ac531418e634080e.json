{"ast":null,"code":"// import { createSlice } from \"@reduxjs/toolkit\";\n// import { createAsyncThunk } from \"@reduxjs/toolkit\";\n\n// const fetchData = createAsyncThunk('fetchData', async()=>{\n//     const response = await fetch('https://jsonplaceholder.typicode.com/todos')\n//     return response.json();\n// },)\n\n// const fetchReducer = createSlice({\n//     name:'fetchReducer',\n//     initialState:{\n//         data:[],\n//         loading:false,\n//         error:null,\n//     },\n//     reducers:{},\n\n//     extraReducers:(builder)=>{\n//         builder.addCase(fetchData.fulfilled,(state,action)=>{\n//             state.data=action.payload;\n//             state.loading=false;\n//         });\n//         builder.addCase(fetchData.pending,()=>{\n//             state.loading=true;\n//             state.error=null;\n//         });\n//         builder.addCase(fetchData.rejected,()=>{\n//             state.error=action.error.message;\n//         })\n//     }\n// })\n\n// export default fetchReducer.reducer;\n// export {fetchData};\n\n// import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n\n// // Define the async thunk\n// const fetchData = createAsyncThunk('fetchData', async () => {\n//     const response = await fetch('https://jsonplaceholder.typicode.com/todos');\n//     const data = await response.json();\n//     return data;\n// });\n\n// // Define the slice\n// const fetchReducer = createSlice({\n//     name: 'fetchReducer',\n//     initialState: {\n//         data: [],\n//         loading: false,\n//         error: null\n//     },\n//     reducers: {},\n//     extraReducers: (builder) => {\n//         builder\n//             .addCase(fetchData.pending, (state) => {\n//                 state.loading = true;\n//                 state.error = null;\n//             })\n//             .addCase(fetchData.fulfilled, (state, action) => {\n//                 state.loading = false;\n//                 state.data = action.payload;\n//             })\n//             .addCase(fetchData.rejected, (state, action) => {\n//                 state.loading = false;\n//                 state.error = action.error.message;\n//             });\n//     }\n// });\n\n// export { fetchData };\n// export default fetchReducer.reducer;","map":{"version":3,"names":[],"sources":["D:/coding ninja projects/skillTest/todolist/src/redux/reducer/fetchReducer.js"],"sourcesContent":["// import { createSlice } from \"@reduxjs/toolkit\";\r\n// import { createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\n// const fetchData = createAsyncThunk('fetchData', async()=>{\r\n//     const response = await fetch('https://jsonplaceholder.typicode.com/todos')\r\n//     return response.json();\r\n// },)\r\n\r\n// const fetchReducer = createSlice({\r\n//     name:'fetchReducer',\r\n//     initialState:{\r\n//         data:[],\r\n//         loading:false,\r\n//         error:null,\r\n//     },\r\n//     reducers:{},\r\n\r\n//     extraReducers:(builder)=>{\r\n//         builder.addCase(fetchData.fulfilled,(state,action)=>{\r\n//             state.data=action.payload;\r\n//             state.loading=false;\r\n//         });\r\n//         builder.addCase(fetchData.pending,()=>{\r\n//             state.loading=true;\r\n//             state.error=null;\r\n//         });\r\n//         builder.addCase(fetchData.rejected,()=>{\r\n//             state.error=action.error.message;\r\n//         })\r\n//     }\r\n// })\r\n\r\n// export default fetchReducer.reducer;\r\n// export {fetchData};\r\n\r\n\r\n// import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\n// // Define the async thunk\r\n// const fetchData = createAsyncThunk('fetchData', async () => {\r\n//     const response = await fetch('https://jsonplaceholder.typicode.com/todos');\r\n//     const data = await response.json();\r\n//     return data;\r\n// });\r\n\r\n// // Define the slice\r\n// const fetchReducer = createSlice({\r\n//     name: 'fetchReducer',\r\n//     initialState: {\r\n//         data: [],\r\n//         loading: false,\r\n//         error: null\r\n//     },\r\n//     reducers: {},\r\n//     extraReducers: (builder) => {\r\n//         builder\r\n//             .addCase(fetchData.pending, (state) => {\r\n//                 state.loading = true;\r\n//                 state.error = null;\r\n//             })\r\n//             .addCase(fetchData.fulfilled, (state, action) => {\r\n//                 state.loading = false;\r\n//                 state.data = action.payload;\r\n//             })\r\n//             .addCase(fetchData.rejected, (state, action) => {\r\n//                 state.loading = false;\r\n//                 state.error = action.error.message;\r\n//             });\r\n//     }\r\n// });\r\n\r\n// export { fetchData };\r\n// export default fetchReducer.reducer;\r\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}