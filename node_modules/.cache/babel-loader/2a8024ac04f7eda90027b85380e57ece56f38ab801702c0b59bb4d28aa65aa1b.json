{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n\n// Thunk for fetching data\nconst fetchData = createAsyncThunk('fetchData', async () => {\n  const response = await fetch('https://jsonplaceholder.typicode.com/todos');\n  return response.json();\n});\n\n// Thunk for posting data\nconst postData = createAsyncThunk('postData', async ({\n  title,\n  body,\n  userId\n}) => {\n  const response = await fetch('https://jsonplaceholder.typicode.com/posts', {\n    method: 'POST',\n    body: JSON.stringify({\n      title,\n      body,\n      userId\n    }),\n    headers: {\n      'Content-Type': 'application/json; charset=UTF-8'\n    }\n  });\n  return response.json();\n});\n\n// Slice for managing fetch and post data\nconst fetchReducer = createSlice({\n  name: 'fetchReducer',\n  initialState: {\n    data: [],\n    loading: false,\n    error: null\n  },\n  reducers: {},\n  extraReducers: builder => {\n    // Fetch cases\n    builder.addCase(fetchData.fulfilled, (state, action) => {\n      state.data = action.payload;\n      state.loading = false;\n    });\n    builder.addCase(fetchData.pending, state => {\n      state.loading = true;\n      state.error = null;\n    });\n    builder.addCase(fetchData.rejected, (state, action) => {\n      state.error = action.error.message;\n      state.loading = false;\n    });\n\n    // Post cases\n    builder.addCase(postData.fulfilled, (state, action) => {\n      state.data.push(action.payload);\n      state.loading = false;\n    });\n    builder.addCase(postData.pending, state => {\n      state.loading = true;\n      state.error = null;\n    });\n    builder.addCase(postData.rejected, (state, action) => {\n      state.error = action.error.message;\n      state.loading = false;\n    });\n  }\n});\nexport default fetchReducer.reducer;\nexport { fetchData, postData };\n\n// import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n\n// // Fetch data thunk\n// const fetchData = createAsyncThunk('fetchData', async () => {\n//     const response = await fetch('https://jsonplaceholder.typicode.com/todos');\n//     return response.json();\n// });\n\n// // Post data thunk\n// const postData = createAsyncThunk('postData', async () => {\n//     const response = await fetch('https://jsonplaceholder.typicode.com/posts', {\n//         method: 'POST',\n//         body: JSON.stringify({\n//             title: 'ram',\n//             body: 'ram',\n//             userId: 1,\n//         }),\n//         headers: {\n//             'Content-Type': 'application/json; charset=UTF-8',\n//         },\n//     });\n//     const data = await response.json();\n//     return data;\n// });\n\n// // Fetch reducer slice\n// const fetchReducer = createSlice({\n//     name: 'fetchReducer',\n//     initialState: {\n//         data: [],\n//         loading: false,\n//         error: null,\n//     },\n//     reducers: {},\n//     extraReducers: (builder) => {\n//         // Fetch\n//         builder.addCase(fetchData.fulfilled, (state, action) => {\n//             state.data = action.payload;\n//             state.loading = false;\n//         });\n//         builder.addCase(fetchData.pending, (state) => {\n//             state.loading = true;\n//             state.error = null;\n//         });\n//         builder.addCase(fetchData.rejected, (state, action) => {\n//             state.error = action.error.message;\n//             state.loading = false;\n//         });\n//         // Post\n//         builder.addCase(postData.fulfilled, (state, action) => {\n//             state.data.push(action.payload); // Assuming you want to add the new post to the data array\n//             state.loading = false;\n//         });\n//         builder.addCase(postData.pending, (state) => {\n//             state.loading = true;\n//             state.error = null;\n//         });\n//         builder.addCase(postData.rejected, (state, action) => {\n//             state.error = action.error.message;\n//             state.loading = false;\n//         });\n//     }\n// });\n\n// export default fetchReducer.reducer;\n// export { fetchData, postData };","map":{"version":3,"names":["createSlice","createAsyncThunk","fetchData","response","fetch","json","postData","title","body","userId","method","JSON","stringify","headers","fetchReducer","name","initialState","data","loading","error","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","pending","rejected","message","push","reducer"],"sources":["D:/coding ninja projects/skillTest/todolist/src/redux/reducer/fetchReducer.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\n// Thunk for fetching data\r\nconst fetchData = createAsyncThunk('fetchData', async () => {\r\n    const response = await fetch('https://jsonplaceholder.typicode.com/todos');\r\n    return response.json();\r\n});\r\n\r\n// Thunk for posting data\r\nconst postData = createAsyncThunk('postData', async ({title, body, userId}) => {\r\n    const response = await fetch('https://jsonplaceholder.typicode.com/posts', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n            title,\r\n            body,\r\n            userId,\r\n        }),\r\n        headers: {\r\n            'Content-Type': 'application/json; charset=UTF-8',\r\n        },\r\n    });\r\n    return response.json();\r\n});\r\n\r\n// Slice for managing fetch and post data\r\nconst fetchReducer = createSlice({\r\n    name: 'fetchReducer',\r\n    initialState: {\r\n        data: [],\r\n        loading: false,\r\n        error: null,\r\n    },\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        // Fetch cases\r\n        builder.addCase(fetchData.fulfilled, (state, action) => {\r\n            state.data = action.payload;\r\n            state.loading = false;\r\n        });\r\n        builder.addCase(fetchData.pending, (state) => {\r\n            state.loading = true;\r\n            state.error = null;\r\n        });\r\n        builder.addCase(fetchData.rejected, (state, action) => {\r\n            state.error = action.error.message;\r\n            state.loading = false;\r\n        });\r\n\r\n        // Post cases\r\n        builder.addCase(postData.fulfilled, (state, action) => {\r\n            state.data.push(action.payload);\r\n            state.loading = false;\r\n        });\r\n        builder.addCase(postData.pending, (state) => {\r\n            state.loading = true;\r\n            state.error = null;\r\n        });\r\n        builder.addCase(postData.rejected, (state, action) => {\r\n            state.error = action.error.message;\r\n            state.loading = false;\r\n        });\r\n    }\r\n});\r\n\r\nexport default fetchReducer.reducer;\r\nexport { fetchData, postData };\r\n\r\n\r\n\r\n// import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\n// // Fetch data thunk\r\n// const fetchData = createAsyncThunk('fetchData', async () => {\r\n//     const response = await fetch('https://jsonplaceholder.typicode.com/todos');\r\n//     return response.json();\r\n// });\r\n\r\n// // Post data thunk\r\n// const postData = createAsyncThunk('postData', async () => {\r\n//     const response = await fetch('https://jsonplaceholder.typicode.com/posts', {\r\n//         method: 'POST',\r\n//         body: JSON.stringify({\r\n//             title: 'ram',\r\n//             body: 'ram',\r\n//             userId: 1,\r\n//         }),\r\n//         headers: {\r\n//             'Content-Type': 'application/json; charset=UTF-8',\r\n//         },\r\n//     });\r\n//     const data = await response.json();\r\n//     return data;\r\n// });\r\n\r\n// // Fetch reducer slice\r\n// const fetchReducer = createSlice({\r\n//     name: 'fetchReducer',\r\n//     initialState: {\r\n//         data: [],\r\n//         loading: false,\r\n//         error: null,\r\n//     },\r\n//     reducers: {},\r\n//     extraReducers: (builder) => {\r\n//         // Fetch\r\n//         builder.addCase(fetchData.fulfilled, (state, action) => {\r\n//             state.data = action.payload;\r\n//             state.loading = false;\r\n//         });\r\n//         builder.addCase(fetchData.pending, (state) => {\r\n//             state.loading = true;\r\n//             state.error = null;\r\n//         });\r\n//         builder.addCase(fetchData.rejected, (state, action) => {\r\n//             state.error = action.error.message;\r\n//             state.loading = false;\r\n//         });\r\n//         // Post\r\n//         builder.addCase(postData.fulfilled, (state, action) => {\r\n//             state.data.push(action.payload); // Assuming you want to add the new post to the data array\r\n//             state.loading = false;\r\n//         });\r\n//         builder.addCase(postData.pending, (state) => {\r\n//             state.loading = true;\r\n//             state.error = null;\r\n//         });\r\n//         builder.addCase(postData.rejected, (state, action) => {\r\n//             state.error = action.error.message;\r\n//             state.loading = false;\r\n//         });\r\n//     }\r\n// });\r\n\r\n// export default fetchReducer.reducer;\r\n// export { fetchData, postData };\r\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;;AAEhE;AACA,MAAMC,SAAS,GAAGD,gBAAgB,CAAC,WAAW,EAAE,YAAY;EACxD,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,4CAA4C,CAAC;EAC1E,OAAOD,QAAQ,CAACE,IAAI,CAAC,CAAC;AAC1B,CAAC,CAAC;;AAEF;AACA,MAAMC,QAAQ,GAAGL,gBAAgB,CAAC,UAAU,EAAE,OAAO;EAACM,KAAK;EAAEC,IAAI;EAAEC;AAAM,CAAC,KAAK;EAC3E,MAAMN,QAAQ,GAAG,MAAMC,KAAK,CAAC,4CAA4C,EAAE;IACvEM,MAAM,EAAE,MAAM;IACdF,IAAI,EAAEG,IAAI,CAACC,SAAS,CAAC;MACjBL,KAAK;MACLC,IAAI;MACJC;IACJ,CAAC,CAAC;IACFI,OAAO,EAAE;MACL,cAAc,EAAE;IACpB;EACJ,CAAC,CAAC;EACF,OAAOV,QAAQ,CAACE,IAAI,CAAC,CAAC;AAC1B,CAAC,CAAC;;AAEF;AACA,MAAMS,YAAY,GAAGd,WAAW,CAAC;EAC7Be,IAAI,EAAE,cAAc;EACpBC,YAAY,EAAE;IACVC,IAAI,EAAE,EAAE;IACRC,OAAO,EAAE,KAAK;IACdC,KAAK,EAAE;EACX,CAAC;EACDC,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IACxB;IACAA,OAAO,CAACC,OAAO,CAACrB,SAAS,CAACsB,SAAS,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MACpDD,KAAK,CAACR,IAAI,GAAGS,MAAM,CAACC,OAAO;MAC3BF,KAAK,CAACP,OAAO,GAAG,KAAK;IACzB,CAAC,CAAC;IACFI,OAAO,CAACC,OAAO,CAACrB,SAAS,CAAC0B,OAAO,EAAGH,KAAK,IAAK;MAC1CA,KAAK,CAACP,OAAO,GAAG,IAAI;MACpBO,KAAK,CAACN,KAAK,GAAG,IAAI;IACtB,CAAC,CAAC;IACFG,OAAO,CAACC,OAAO,CAACrB,SAAS,CAAC2B,QAAQ,EAAE,CAACJ,KAAK,EAAEC,MAAM,KAAK;MACnDD,KAAK,CAACN,KAAK,GAAGO,MAAM,CAACP,KAAK,CAACW,OAAO;MAClCL,KAAK,CAACP,OAAO,GAAG,KAAK;IACzB,CAAC,CAAC;;IAEF;IACAI,OAAO,CAACC,OAAO,CAACjB,QAAQ,CAACkB,SAAS,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MACnDD,KAAK,CAACR,IAAI,CAACc,IAAI,CAACL,MAAM,CAACC,OAAO,CAAC;MAC/BF,KAAK,CAACP,OAAO,GAAG,KAAK;IACzB,CAAC,CAAC;IACFI,OAAO,CAACC,OAAO,CAACjB,QAAQ,CAACsB,OAAO,EAAGH,KAAK,IAAK;MACzCA,KAAK,CAACP,OAAO,GAAG,IAAI;MACpBO,KAAK,CAACN,KAAK,GAAG,IAAI;IACtB,CAAC,CAAC;IACFG,OAAO,CAACC,OAAO,CAACjB,QAAQ,CAACuB,QAAQ,EAAE,CAACJ,KAAK,EAAEC,MAAM,KAAK;MAClDD,KAAK,CAACN,KAAK,GAAGO,MAAM,CAACP,KAAK,CAACW,OAAO;MAClCL,KAAK,CAACP,OAAO,GAAG,KAAK;IACzB,CAAC,CAAC;EACN;AACJ,CAAC,CAAC;AAEF,eAAeJ,YAAY,CAACkB,OAAO;AACnC,SAAS9B,SAAS,EAAEI,QAAQ;;AAI5B;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}