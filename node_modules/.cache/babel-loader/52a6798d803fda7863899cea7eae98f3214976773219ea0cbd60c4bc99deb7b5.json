{"ast":null,"code":"// import { createSlice } from \"@reduxjs/toolkit\";\n// import { createAsyncThunk } from \"@reduxjs/toolkit\";\n\n// const fetchData = createAsyncThunk('fetchData', async()=>{\n//     const response = await fetch('https://jsonplaceholder.typicode.com/todos')\n//     return response.json();\n// },);\n\n// const postData = createAsyncThunk('postData',async ()=>{\n//     await fetch('https://jsonplaceholder.typicode.com/posts',{\n//         method:'POST',\n//         body:JSON.stringify({\n//             title:'ram',\n//            // body:'ram',\n//            // userId:1,\n//         }),\n//         header:{\n//             'content-type':'application/json; charset=UTF-8',\n//         },\n//     })\n//     .then((response)=>response.json())\n//     .then((json)=>console.log(json))\n// })\n\n// const fetchReducer = createSlice({\n//     name:'fetchReducer',\n//     initialState:{\n//         data:[],\n//         loading:false,\n//         error:null,\n//     },\n//     reducers:{},\n\n//     extraReducers:(builder)=>{\n//         //fetch\n//         builder.addCase(fetchData.fulfilled,(state,action)=>{\n//             state.data=action.payload;\n//             state.loading=false;\n//         });\n//         builder.addCase(fetchData.pending,(state,action)=>{\n//             state.loading=true;\n//             state.error=null;\n//         });\n//         builder.addCase(fetchData.rejected,(state,action)=>{\n//             state.error=action.error.message;\n//         });\n//         //post\n//         builder.addCase(postData.fulfilled,(state,action)=>{\n//             state.data.push(action.payload);\n//             state.loading=false\n//         });\n//         builder.addCase(postData.pending,(state,action)=>{\n//             state.loading=true;\n//             state.error=null;\n//         })\n//         builder.addCase(postData.rejected,(state,action)=>{\n//             state.error=action.error.message;\n//         })\n\n//     }\n// })\n\n// export default fetchReducer.reducer;\n// export {fetchData,postData};\n\nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n\n// Fetch data thunk\nconst fetchData = createAsyncThunk('fetchData', async () => {\n  const response = await fetch('https://jsonplaceholder.typicode.com/todos');\n  return response.json();\n});\n\n// Post data thunk\nconst postData = createAsyncThunk('postData', async () => {\n  const response = await fetch('https://jsonplaceholder.typicode.com/posts', {\n    method: 'POST',\n    body: JSON.stringify({\n      title: 'ram',\n      body: 'ram',\n      userId: 1\n    }),\n    headers: {\n      'Content-Type': 'application/json; charset=UTF-8'\n    }\n  });\n  const data = await response.json();\n  return data;\n});\n\n// Fetch reducer slice\nconst fetchReducer = createSlice({\n  name: 'fetchReducer',\n  initialState: {\n    data: [],\n    loading: false,\n    error: null\n  },\n  reducers: {},\n  extraReducers: builder => {\n    // Fetch\n    builder.addCase(fetchData.fulfilled, (state, action) => {\n      state.data = action.payload;\n      state.loading = false;\n    });\n    builder.addCase(fetchData.pending, state => {\n      state.loading = true;\n      state.error = null;\n    });\n    builder.addCase(fetchData.rejected, (state, action) => {\n      state.error = action.error.message;\n      state.loading = false;\n    });\n    // Post\n    builder.addCase(postData.fulfilled, (state, action) => {\n      state.data.push(action.payload); // Assuming you want to add the new post to the data array\n      state.loading = false;\n    });\n    builder.addCase(postData.pending, state => {\n      state.loading = true;\n      state.error = null;\n    });\n    builder.addCase(postData.rejected, (state, action) => {\n      state.error = action.error.message;\n      state.loading = false;\n    });\n  }\n});\nexport default fetchReducer.reducer;\nexport { fetchData, postData };","map":{"version":3,"names":["createSlice","createAsyncThunk","fetchData","response","fetch","json","postData","method","body","JSON","stringify","title","userId","headers","data","fetchReducer","name","initialState","loading","error","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","pending","rejected","message","push","reducer"],"sources":["D:/coding ninja projects/skillTest/todolist/src/redux/reducer/fetchReducer.js"],"sourcesContent":["// import { createSlice } from \"@reduxjs/toolkit\";\r\n// import { createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\n// const fetchData = createAsyncThunk('fetchData', async()=>{\r\n//     const response = await fetch('https://jsonplaceholder.typicode.com/todos')\r\n//     return response.json();\r\n// },);\r\n\r\n// const postData = createAsyncThunk('postData',async ()=>{\r\n//     await fetch('https://jsonplaceholder.typicode.com/posts',{\r\n//         method:'POST',\r\n//         body:JSON.stringify({\r\n//             title:'ram',\r\n//            // body:'ram',\r\n//            // userId:1,\r\n//         }),\r\n//         header:{\r\n//             'content-type':'application/json; charset=UTF-8',\r\n//         },\r\n//     })\r\n//     .then((response)=>response.json())\r\n//     .then((json)=>console.log(json))\r\n// })\r\n\r\n// const fetchReducer = createSlice({\r\n//     name:'fetchReducer',\r\n//     initialState:{\r\n//         data:[],\r\n//         loading:false,\r\n//         error:null,\r\n//     },\r\n//     reducers:{},\r\n\r\n//     extraReducers:(builder)=>{\r\n//         //fetch\r\n//         builder.addCase(fetchData.fulfilled,(state,action)=>{\r\n//             state.data=action.payload;\r\n//             state.loading=false;\r\n//         });\r\n//         builder.addCase(fetchData.pending,(state,action)=>{\r\n//             state.loading=true;\r\n//             state.error=null;\r\n//         });\r\n//         builder.addCase(fetchData.rejected,(state,action)=>{\r\n//             state.error=action.error.message;\r\n//         });\r\n//         //post\r\n//         builder.addCase(postData.fulfilled,(state,action)=>{\r\n//             state.data.push(action.payload);\r\n//             state.loading=false\r\n//         });\r\n//         builder.addCase(postData.pending,(state,action)=>{\r\n//             state.loading=true;\r\n//             state.error=null;\r\n//         })\r\n//         builder.addCase(postData.rejected,(state,action)=>{\r\n//             state.error=action.error.message;\r\n//         })\r\n\r\n\r\n//     }\r\n// })\r\n\r\n// export default fetchReducer.reducer;\r\n// export {fetchData,postData};\r\n\r\n\r\nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\n// Fetch data thunk\r\nconst fetchData = createAsyncThunk('fetchData', async () => {\r\n    const response = await fetch('https://jsonplaceholder.typicode.com/todos');\r\n    return response.json();\r\n});\r\n\r\n// Post data thunk\r\nconst postData = createAsyncThunk('postData', async () => {\r\n    const response = await fetch('https://jsonplaceholder.typicode.com/posts', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n            title: 'ram',\r\n            body: 'ram',\r\n            userId: 1,\r\n        }),\r\n        headers: {\r\n            'Content-Type': 'application/json; charset=UTF-8',\r\n        },\r\n    });\r\n    const data = await response.json();\r\n    return data;\r\n});\r\n\r\n// Fetch reducer slice\r\nconst fetchReducer = createSlice({\r\n    name: 'fetchReducer',\r\n    initialState: {\r\n        data: [],\r\n        loading: false,\r\n        error: null,\r\n    },\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        // Fetch\r\n        builder.addCase(fetchData.fulfilled, (state, action) => {\r\n            state.data = action.payload;\r\n            state.loading = false;\r\n        });\r\n        builder.addCase(fetchData.pending, (state) => {\r\n            state.loading = true;\r\n            state.error = null;\r\n        });\r\n        builder.addCase(fetchData.rejected, (state, action) => {\r\n            state.error = action.error.message;\r\n            state.loading = false;\r\n        });\r\n        // Post\r\n        builder.addCase(postData.fulfilled, (state, action) => {\r\n            state.data.push(action.payload); // Assuming you want to add the new post to the data array\r\n            state.loading = false;\r\n        });\r\n        builder.addCase(postData.pending, (state) => {\r\n            state.loading = true;\r\n            state.error = null;\r\n        });\r\n        builder.addCase(postData.rejected, (state, action) => {\r\n            state.error = action.error.message;\r\n            state.loading = false;\r\n        });\r\n    }\r\n});\r\n\r\nexport default fetchReducer.reducer;\r\nexport { fetchData, postData };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}